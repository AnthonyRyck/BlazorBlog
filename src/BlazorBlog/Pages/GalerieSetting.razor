@page "/galeriesetting"
@attribute [Authorize(Roles = "Admin, Compositeur")]
@inject IGalerieSettingViewModel ViewModel

<h3>Gestion des images</h3>
    @if(ViewModel.IsLoading)
	{
		<CountImgLoading />
    }
	else
	{
        <MudPaper>
            <MudTextField @bind-Value="@ViewModel.ImageRecherche" 
                        Placeholder="Rechercher une image" 
                        Adornment="Adornment.Start" 
                        AdornmentIcon="@Icons.Material.Filled.Search" 
                        IconSize="Size.Medium" />
        </MudPaper>

        <MudGrid>
        <MudItem xs="9">

        @if(ViewModel.ImagesToDisplay.Count > 0)
        {
            <MudStack Row="true" Justify="Justify.FlexStart" Class="flex-wrap">
               @foreach(ImageSetting img in ViewModel.ImagesToDisplay)
                {
                    <MudBadge Content="@img.CounterUse" Overlap="true" Class="mx-6 my-4" Color="@img.Couleur">
                           <MudImage Src="@img.UrlImage" 
                                    ObjectFit="ObjectFit.ScaleDown" 
                                    Class="@img.BorderSelection"
                                    Width="150" Height="150"
                                    @onclick="@(() => ViewModel.SelectImage(img))" />
                     </MudBadge>
                }
            </MudStack>

        <div class="d-flex flex-column align-center">
            <MudPagination ShowFirstButton="true" 
                            ShowLastButton="true" 
                            Count="ViewModel.CounterPage"
                            SelectedChanged="ViewModel.PageChanged"
                            Class="mt-4"/>
        </div>
        }
        else
        {
             <MudPaper Elevation="5">Aucune image de trouvée.</MudPaper>
        }

        </MudItem>
        <MudItem xs="3">
            @if(@ViewModel.ImagesSelectedToDelete.Count > 0)
            {
            <div>
               <MudFab Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="ViewModel.DeleteImage" />
               <MudFab Color="Color.Primary" StartIcon="@Icons.Filled.Cancel" OnClick="ViewModel.ResetSelection" />
               <MudPaper><h4>Sélection : @ViewModel.ImagesSelectedToDelete.Count</h4></MudPaper>
            </div>
            <div class="scroll" style="max-height: 500px;">
                @foreach(ImageSetting imgToDelete in ViewModel.ImagesSelectedToDelete)
                {
                    <MudPaper Elevation="3" Style="margin-bottom:3px; margin-top:3px;">
                        <div>
                            <b>Nom</b> : @imgToDelete.FileName
                        </div>
                        <div>
                            <b>Utilisé</b> : @imgToDelete.CounterUse
                        </div>
                    </MudPaper>
                }
            </div>
            }
        </MudItem>
        
        </MudGrid>

}

@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    protected override void OnInitialized()
    {
        ViewModel.SetStateChanged(StateHasChanged);
        ViewModel.LoadImages();
        base.OnInitialized();
    }
}
